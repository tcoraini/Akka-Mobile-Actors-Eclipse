package se.scalablesolutions.akka.mobile.util

import se.scalablesolutions.akka.mobile.theater.LocalTheater
import se.scalablesolutions.akka.mobile.theater.TheaterNode
import util.Random

object UUID {
  // A node ID to be used in the UUID, it's just the index of this node in the list of the configuration file
  /*private*/ lazy val nodeId: Long = ClusterConfiguration.nodeNames.indexOf(LocalTheater.description.name) match {
    case -1 => 0
    case n => n + 1
  }

  // A mask with the bits for the node ID, followed by 41 zeros (the space the timestamp will use)
  private lazy val mask: Long = nodeId << 41

  private var lastTime: Long = 0
  /**
   * Our UUID will be generated in a similar way of AspectWerkz, using the System.currentTimeMillis.
   * But we're gonna add the identification of the node where the ID was generated, preventing that
   * equal UUID's are generated at exactly the same time in different machines.
   *
   * The currentTimeMillis uses 41 bits (for the next 28 years), so we shift the node ID 41 bits to the
   * left. This way, the final UUID will be of the form 1NNN..NNNTTT..TTT, where:
   *  - 1 -> always the first bit, so the resulting UUID is a positive Long
   *  - NNN..NNN -> the bits for the node ID. It can take from 1 to 22 bits. We are just assuming there will
   *  be no more than 4194304 nodes (the largest number we can write with 22 bits).
   *  - TTT..TTT -> the bits for the timestamp (System.currentTimeMillis). Uses 41 bits for the next 28 years.
   */
  def newUuid: Long = {
    // Current time
    var time = System.currentTimeMillis
    // Avoiding a race condition when two threads get the same 'time' value
    this.synchronized {
      if (time <= lastTime) {
        time = lastTime + 1;
      }
      lastTime = time;
    }

    // Final UUID, with the node ID and the timestamp
    mask | time
  }

  // Returns the node where the UUID was created
  def whereFrom(uuid: Long): TheaterNode = {
    // Removes the timestamp from the UUID, remaining only the node ID
    val nodeIndex = (uuid >> 41) - 1
    val nodeNames = ClusterConfiguration.nodeNames
    if (nodeIndex >= 0 && nodeIndex < nodeNames.size)
      TheaterNode(nodeNames(nodeIndex.toInt))
    else
      throw new RuntimeException("The UUID [" + uuid + "] does not seen to be an UUID generated by this class.")
  }
}
